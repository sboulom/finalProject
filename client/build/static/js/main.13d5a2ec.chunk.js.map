{"version":3,"sources":["components/NavigationBar/index.js","pages/Register.js","pages/SignIn.js","components/Jumbotron/index.js","pages/UserProfile.js","utils/API.js","pages/BrowseBeers.js","App.js","serviceWorker.js","index.js"],"names":["NavigationBar","className","Navbar","bg","expand","Toggle","aria-controls","Collapse","id","Nav","Link","href","class","Register","console","log","SignIn","Container","Card","Body","Title","InputGroup","FormControl","placeholder","aria-label","aria-describedby","Button","Jumbo","Jumbotron","fluid","UserProfile","Row","Col","map","Beer","Img","variant","src","Text","axios","get","BrowseBeers","useState","data","beers","setBeers","useEffect","API","then","res","catch","err","slice","beer","index","name","style","fontSize","abv","category","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.13d5a2ec.chunk.js","sourcesContent":["import React from \"react\";\nimport { Nav, Navbar } from \"react-bootstrap\";\n// import Jumbotron from '../Jumbotron'\nimport \"./index.css\";\n\nexport const NavigationBar = () => (\n  <div className='navbar navbar-expand'>\n    <Navbar className= 'innerNavbar' bg=\"light\" expand=\"lg\">\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\" />\n        <Nav.Link href=\"/\"><i class=\"fas fa-home\"> Home</i></Nav.Link>\n        <Nav.Link href='/'><i class=\"fas fa-house-user\"> Profile</i></Nav.Link>\n        <Nav.Link href='/Browse'><i class=\"fas fa-beer\"> Browse Beers</i></Nav.Link>\n        <Nav.Link href='/signin'>Sign In</Nav.Link>\n        <Nav.Link href='/register'>Register</Nav.Link>\n      </Navbar.Collapse>\n    </Navbar>\n  </div>\n);\n","// import React from \"react\";\n\nconst Register = () => {\n  // use passport for authentication\n  console.log(\"This is Register\");\n};\nexport default Register;\n","import React from 'react'\nimport {Container, Card, InputGroup, FormControl, Button} from 'react-bootstrap'\nimport './SignIn.css'\n\nconst SignIn = () => {\n  return (\n    <Container className='signInWrapper'>\n      <div>\n        <Card>\n          <Card.Body>\n            <Card.Title>Sign In</Card.Title>\n            <InputGroup className='mb-3'>\n              <FormControl\n                placeholder='Email'\n                aria-label='Email'\n                aria-describedby='basic-addon1'\n              />\n            </InputGroup>\n            <InputGroup className='mb-3'>\n              <FormControl\n                placeholder='Password'\n                aria-label='Password'\n                aria-describedby='basic-addon1'\n              />\n            </InputGroup>\n            <Button>\n              <i class='fas fa-door-open'></i>\n            </Button>\n          </Card.Body>\n        </Card>\n      </div>\n    </Container>\n  )\n}\n\nexport default SignIn\n","import React from \"react\";\nimport { Jumbotron, Container } from \"react-bootstrap\";\nimport \"./index.css\";\n\nfunction Jumbo() {\n  return (\n    <div>\n      <Jumbotron fluid className=\"display\">\n        <Container className=\"jumbo\">\n        <div>\n          <h1 className='statsDiv'>Title</h1>\n          <h2>Stats</h2>\n        </div>\n        </Container>\n      </Jumbotron>\n    </div>\n  );\n}\n\nexport default Jumbo;\n","import React from 'react'\nimport { Container, Row, Col, Card } from 'react-bootstrap'\nimport './UserProfile.css'\nimport Jumbotron from \"../components/Jumbotron\"\n\nfunction UserProfile() {\n  return (\n    <Container className='userWrapper'>\n      <Jumbotron />\n      <h1> User Profile</h1>\n      <Row>\n        <Col>\n        {/* xs ={12} sm={12} md={6} */}\n        <div className=\"userBeer\">\n        {[1, 2, 3, 4, 5].map((Beer) => {\n              return (\n                <Card>\n                  {/* Information below will be populated dynamically once we get the API working */}\n                  <Card.Img variant=\"top\" src=\"holder.js/100px160\" />\n                  <Card.Body>\n                    <Card.Title>Name of Beer</Card.Title>\n                    <Card.Text>\n                      <ul>\n                        <li>Beer Stlye</li>\n                        <li>ABV</li>\n                        <li>Excerpt of Description</li>\n                        <li>Category</li>\n                      </ul>\n                    </Card.Text>\n                  </Card.Body>\n                </Card>\n              );\n            })}\n        \n        \n        </div>\n        </Col>\n      </Row>\n    </Container>\n\n\n\n    // <div className='wrapper'>\n    //   <h1>User Profile</h1>\n    //   <Container fluid='sm'>\n    //     <CardGroup>\n    //       <Card>\n    //         <Card.Img variant='top' src='holder.js/100px160' />\n    //         <Card.Body>\n    //           <Card.Title>Name of Beer</Card.Title>\n    //           <Card.Text>\n    //            all the tuff \n    //           </Card.Text>\n    //         </Card.Body>\n    //       </Card>\n    //       <Card>\n    //         <Card.Img variant='top' src='holder.js/100px160' />\n    //         <Card.Body>\n    //           <Card.Title>Card title</Card.Title>\n    //           <Card.Text>\n    //             This card has supporting text below as a natural lead-in to\n    //             additional content.{' '}\n    //           </Card.Text>\n    //         </Card.Body>\n    //       </Card>\n         \n    //     </CardGroup>\n    //   </Container>\n    // </div>\n  )\n}\n\nexport default UserProfile\n","import axios from \"axios\";\n\n// export default getBeers;\nexport default {\n  getBeers: function () {\n    return axios.get(\n      \"https://cors-anywhere.herokuapp.com/http://api.brewerydb.com/v2/beers/?key=87c960285bab5e70410f78d6662f74ad\"\n    );\n  },\n};\n\n// export default {\n//   getBeers: function(query) {\n//     return axios.get(\"/api/beers\", { params: { q: query } });\n//   }\n// };\n","import React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { Container, Row, Col, Card } from \"react-bootstrap\";\nimport API from \"../utils/API.js\";\n// import DB from \"../utils/DB.js\";\nimport \"./BrowseBeers.css\";\n\nfunction BrowseBeers() {\n  const [beers, setBeers] = useState({ data: [] });\n  // const [Description, setDescription] = useState();\n  // const [StyleDescription, setStyleDescription] = useState();\n  // const [beerSearch, setBeerSearch] = useState(\"\");\n\n  useEffect(() => {\n    // DB.getBeers()\n    //   .then((res) => {\n    //     console.log(res);\n    //   })\n    //   .catch((err) => {\n    //     console.log(err);\n    //   });\n    API.getBeers()\n      .then((res) => {\n        setBeers(res.data);\n        // console.log(res.data.data[0]);\n        // res.data.data.slice(0, 2).map((beer, index) => {\n        //   if (beer.description == null) {\n        //     return beer.style.description;\n        //   } else {\n        //     return beer.description;\n        //   }\n        // });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    console.log(\"useEffect has been called\");\n  }, []);\n\n  // DB.getBeers(beerSearch)\n  //   .then(res => setBeers(res.data))\n  //   .catch(err => console.log(err));\n\n  return (\n    <Container className=\"browseBeer\">\n      <h1>Browse Beer</h1>\n      <Row>\n        <Col>\n          <div className=\"beerContainer\">\n            {beers.data.slice(0, 2).map((beer, index) => {\n              return (\n                <Card className=\"beerCard\">\n                  <Card.Img variant=\"top\" src=\"\" className=\"cardImage\" />\n                  <Card.Body>\n                    <h3>\n                      <i class=\"fas fa-plus-circle\"></i>\n                    </h3>\n                    {/* <Card.Title>Name of Beer</Card.Title> */}\n                    <Card.Title>{beer.name}</Card.Title>\n                    <Card.Title style={{ fontSize: 13 }}>\n                      {beer.style.name} | {beer.abv}% ABV\n                    </Card.Title>\n                    <Card.Text>\n                      <ul>\n                        <li>Region/Type: {beer.style.category.name}</li>\n                        <li>Excerpt of Description: {}</li>\n                      </ul>\n                    </Card.Text>\n                  </Card.Body>\n                </Card>\n              );\n            })}\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default BrowseBeers;\n\n// document.getElementById(\"addBeer\").onclick = function(){console.log('Beer Added')}","import React from \"react\";\n// import \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { NavigationBar } from \"./components/NavigationBar\";\nimport Register from \"./pages/Register\";\nimport SignIn from \"./pages/SignIn\";\nimport UserProfile from \"./pages/UserProfile\";\nimport BrowseBeers from \"./pages/BrowseBeers\";\nimport \"./app.css\";\n\n\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <NavigationBar />\n      <Router>\n        <Switch>\n          <Route path=\"/register\" component={Register} />\n          <Route path=\"/signin\" component={SignIn} />\n          <Route path=\"/browse\" component={BrowseBeers} />\n          {/* Home route temporarily will route to UserProfile until Auth is set up */}\n          <Route exact path=\"/\" component={UserProfile}>\n          {/* <div class=\"lds-circle\"><div></div></div> */}\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}